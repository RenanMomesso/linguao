enum AttachmentType {
  IMAGE
  VIDEO
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  MENU
  PROGRESS
}

enum MenuType {
  LIST
  BUTTON
  PROGRESS
}

enum Category {
  VOCABULARY
  GRAMMAR
  SPEAKING
  LISTENING
  UNTITLEDVALUE
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  languageLevel: String
  language: String
  nativeLanguage: String
  age: String
  email: String
  languagePurpose: String
  timePerDay: String
  avatar: String
  challenges: String
  diamonds: String
  followers: String
  following: String
  lifetimeexp: String
  artificialInteligenceUser: Boolean
  ChatRooms: [ChatRoom] @manyToMany(relationName: "UserChatRoom")
}

enum Language {
  ENGLISH
  PORTUGUESE
  CHINESE
  GERMANY
  FRENCH
  ARABIAN
  RUSSIAN
  SWEDESH
  SPANISH
}

type Sentence @model @auth(rules: [{ allow: public }]) {
  id: ID!
  phrase: String!
  language: Language!
  level: EnglishLevel
  fakeSentence: String
}

type Word @model @auth(rules: [{ allow: public }]) {
  id: ID!
  languange: Language
  word: String
  translatedWord: String
  wordlistID: ID! @index(name: "byWordList")
}

type WordList @model @auth(rules: [{ allow: public }]) {
  id: ID!
  level: EnglishLevel
  name: String
  Words: [Word] @hasMany(indexName: "byWordList", fields: ["id"])
}

enum EnglishLevel {
  C1
  C2
  A1
  A2
  B1
  B2
}

type EnglishSentence @model @auth(rules: [{ allow: public }]) {
  id: ID!
  sentence: String!

  type: String!
    @index(
      name: "sentencesByCreatedAt"
      queryField: "sentencesByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  imageUrl: String
  translation: String!
  fakeWords: [String!]!
  level: EnglishLevel!
  fakeSentences: [String!]
  language: Language!
  category: Category!
  createdAt: String!
}

type ImageMapModal @model @auth(rules: [{ allow: public }]) {
  id: ID!
  imageUrl: String!
  items: [ImageMapItem] @hasMany(indexName: "byImageMapModal", fields: ["id"])
}

enum Shape {
  RECTANGLE
  CIRCLE
}

type ImageMapItem @model @auth(rules: [{ allow: public }]) {
  id: ID!
  shape: Shape!
  x1: Float!
  y1: Float!
  x2: Float
  y2: Float
  width: Float
  height: Float
  radius: Float
  fill: String
  prefill: String
  name: String
  imageMapModalID: ID! @index(name: "byImageMapModal")
}

type ChatRoom @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserChatRoom")
  lastMessage: Message @hasOne
  Attachments: [Attachment] @hasMany(indexName: "byChatRoom", fields: ["id"])
  artificialInteligenceRoom: Boolean
}

type Message @model @auth(rules: [{ allow: public }]) {
  id: ID!
  text: String!
  chatroomID: ID! @index(name: "byChatRoom")
  userID: ID! @index(name: "byUser")
  userName: String
  images: [String]
  Attachments: [Attachment] @hasMany(indexName: "byMessage", fields: ["id"])
  showMenu: Boolean
  menuType: MenuType
  progress: Int
  messageType: MessageType
  audioDuration: Int
  audioText: String
}

type Attachment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  storageKey: String!
  type: AttachmentType!
  width: Int
  height: Int
  duration: Int
  messageID: ID! @index(name: "byMessage")
  chatroomID: ID! @index(name: "byChatRoom")
}

type AiReply {
  audio: String
  text: String
}

type Mutation {
  aiReplyMutation(userAudio: String): AiReply!
    @function(name: "aireply-${env}")
}

type Query {
  textToSpeech: String @predictions(actions: [convertTextToSpeech])
}